#!/usr/bin/env ruby
# derived in the name of consistency from
# https://github.com/laycat/natwest/blob/master/bin/nw, the product of
# runpaint's original repo here: https://github.com/runpaint/natwest

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'amex'
require 'highline/import'
require 'yaml'

def credential_load
  config = File.expand_path("~/.amex.yaml")

  if File.exists?(config)
    if File.world_readable?(config) or not File.owned?(config)
      mode = File.stat(config).mode.to_s(8)
      $stderr.puts "#{config}: Insecure permissions: #{mode}"
    end
  end

  credentials = YAML.load(File.read(config)) rescue {}

  ['username', 'password'].each do |credential|
    key = credential.tr(' ','_').downcase.to_sym
    next if credentials.key?(key)
    unless $stdin.tty? and $stdout.tty?
      $stderr.puts "Can't prompt for credentials; STDIN or STDOUT is not a TTY"
      exit(1)
    end
    credentials[key] = ask("Please enter your #{credential}:") do |q|
      q.echo = "*"
    end
  end

  return credentials
end

action = ARGV[0]

# TODO add summary
if action == "transactions"
  credentials = credential_load
  Amex.new.tap do |am|
    am.login credentials
    transactions = am.transactions(ARGV[1], ARGV[2], ARGV[3])
    puts "Transactions for account ending #{ARGV[3]}, between #{ARGV[1]} and #{ARGV[2]}"
    puts "Date       Description                                                 Amount"
    transactions.each do |t|
      puts "#{t[:date]} #{sprintf('%-60.60s',t[:description])} #{sprintf('%9.2f', t[:amount])}"
    end
  end
else
 puts "This is a rudimentary API for American Express (UK)
  https://github.com/laycat/amex
  
  Usage:
  am <command>
  Commands:
    transactions <start date> <end date> <account>
      Gets transactions between two dates for an account. Dates are parsed by ruby
      (so can be any format parsable by Date.parse), account is the 4 last digits
      credit card number.
  For more information see the README:
  https://github.com/laycat/amex/blob/master/README.markdown"
end
